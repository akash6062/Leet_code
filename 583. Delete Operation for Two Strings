 class Solution {
public:
   int longestCommonSubsequence(string s, string t) {
    int m=s.size();
    int n=t.size();
       
    vector<vector<int>> dp(m+1,vector<int> (n+1,0));
    // return f(s,t,m-1,n-1,dp);
    for(int i=0;i<=m;i++)
    {
        dp[i][0]=0;
    }
    for(int j=0;j<=n;j++)
    {
        dp[0][j]=0;
    }
    
    for(int i=1;i<=m;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(s[i-1]==t[j-1])
            {
                dp[i][j]=1+dp[i-1][j-1];
            }
           else
           {
            dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
           }
        }

    }
    return dp[m][n];

    }

    int minDistance(string w1, string w2) {
        // return
           int y= longestCommonSubsequence(w1,w2);
         int m=w1.size();
    int n=w2.size();
        return m+n-2*y;
        
        
    }
};
